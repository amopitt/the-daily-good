{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"User": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					}
				},
				"required": [
					"last_name",
					"first_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnauthorizedError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"asdf failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "access_token",
				"in": "query"
			},
			"tsoa_auth": {
				"type": "oauth2",
				"flows": {
					"implicit": {
						"authorizationUrl": "http://swagger.io/api/oauth/dialog",
						"scopes": {
							"write:pets": "modify things",
							"read:pets": "read things"
						}
					}
				}
			}
		}
	},
	"info": {
		"title": "amoserveroso",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/user": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_id": "52907745-7672-470e-a803-a2f8feb52944",
											"first_name": "sean",
											"last_name": "asdffaceers"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedError"
								}
							}
						}
					}
				},
				"description": "Gets all users right now, yolo style.",
				"summary": "Get users",
				"tags": [
					"Users",
					"YO"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new user.",
				"summary": "Create new user.",
				"tags": [
					"Users",
					"YO"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The model User to create.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Update an existing user.",
				"summary": "Update an existing user.",
				"tags": [
					"Users",
					"YO"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The user to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User"
							}
						}
					}
				}
			}
		},
		"/user/{userId}": {
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Deletes a user by id.",
				"summary": "Delete user by id.",
				"tags": [
					"Users",
					"YO"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "The id of the User to delete.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}